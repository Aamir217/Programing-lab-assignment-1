// Program to find the minimum number of operations to convert one string to another

CODE ->
#include <stdio.h>
#include <string.h>

#define MAX_LENGTH 100

int min(int a, int b, int c) {
    int m = a;
    if (b < m) m = b;
    if (c < m) m = c;
    return m;
}

int levenshtein_distance(char *s, char *t) {
    int m = strlen(s);
    int n = strlen(t);
    int d[MAX_LENGTH + 1][MAX_LENGTH + 1];

    for (int i = 0; i <= m; i++) {
        d[i][0] = i;
    }
    for (int j = 0; j <= n; j++) {
        d[0][j] = j;
    }

    for (int j = 1; j <= n; j++) {
        for (int i = 1; i <= m; i++) {
            if (s[i - 1] == t[j - 1]) {
                d[i][j] = d[i - 1][j - 1];
            } else {
                d[i][j] = min(d[i - 1][j] + 1,      // deletion
                              d[i][j - 1] + 1,      // insertion
                              d[i - 1][j - 1] + 1); // substitution
            }
        }
    }

    return d[m][n];
}

int main() {
    char s[MAX_LENGTH], t[MAX_LENGTH];

    printf("Enter the first string: ");
    scanf("%[^\n]s",s);

    printf("Enter the second string: ");
    scanf("%[^\n]s",t);

    int distance = levenshtein_distance(s, t);
    printf("The minimum number of operations required: %d\n", distance);

    return 0;
}
